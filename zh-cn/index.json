[{"categories":["PAT Basic"],"content":"PAT Basic 1025. 反转链表（25分） (C语言实现) ","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:0","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"题目 给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。 ","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:1","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"输入格式 每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤105)、以及正整数 K (≤N)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。 接下来有 N 行，每行格式为： Address Data Next 其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。 ","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:2","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"输出格式 对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。 ","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:3","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"输入样例 00100 6 4 00000 4 99999 00100 1 12309 68237 6 -1 33218 3 00000 99999 5 68237 12309 2 33218 ","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:4","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"输出样例 00000 4 33218 33218 3 12309 12309 2 00100 00100 1 99999 99999 5 68237 68237 6 -1 ","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:5","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"思路 将L中每K个结点反转,若最后不到K个元素不反转 注意输入格式 我们应先记录每个结点,因为题意是按节点顺序排列,所以当我们输入完全部节点还应调整节点位序,方便转置,在转置点过程中,记得判断后续元素是否有K个 利用SWAPNODE（）调整节点位序 在调整节点顺序方面将链表顺序放于数组中。因此涉及一个分类讨论： 数组第一个i=0地址应该对应首个结点的地址（代码里的A）， 数组中第i\u003e0个地址np[i]-\u003eaddr应为前一个所指向的地址np[i - 1]-\u003enext ","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:6","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e#define SWAPNODE(A, B) {Node temp = A; A = B; B = temp;}/* 定义交换函数 */ typedef struct node{/* 定义节点结构 */ int addr; int data; int next; }node, *Node; int main() { int A, N, K; node nodes[100000] = {0}; Node np[100000] = {0}, *p; /* 记录节点 */ scanf(\"%d %d %d\", \u0026A, \u0026N, \u0026K); for(int i = 0; i \u003c N; i++) { np[i] = nodes + i; scanf(\"%d %d %d\", \u0026np[i]-\u003eaddr, \u0026np[i]-\u003edata, \u0026np[i]-\u003enext); } /* 调整节点顺序 */ for(int i = 0; i \u003c N; i++) { for(int j = i; j \u003c N; j++) if(np[j]-\u003eaddr == (i ? np[i - 1]-\u003enext : A)) { SWAPNODE(np[i], np[j]); break; } if(np[i]-\u003enext == -1) /* NULL,调整完成 */ N = i + 1; } /* 转置链表 */ for(int i = 0; i \u003c N / K; i++) { p = np + i * K; for(int j = 0; j \u003c K / 2; j++) SWAPNODE(p[j], p[K - j - 1]); } /* 输出 */ for(int i = 0; i \u003c N - 1; i++) printf(\"%05d %d %05d\\n\", np[i]-\u003eaddr, np[i]-\u003edata, np[i + 1]-\u003eaddr); printf(\"%05d %d -1\\n\", np[N - 1]-\u003eaddr, np[N - 1]-\u003edata); return 0; }","date":"2021-01-28","objectID":"/zh-cn/posts/pat-basic-1025/:0:7","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1025","uri":"/zh-cn/posts/pat-basic-1025/"},{"categories":["PAT Basic"],"content":"PAT Basic 1024. 科学计数法（20分） (C语言实现) ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"题目 科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式[+-][1-9].[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。 现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"输入格式 每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"输出格式 对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"输入样例1 +1.23400E-03 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"输出样例1 0.00123400 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"输入样例2 -1.2E+10 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"输出样例2 -12000000000 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"思路 将输入的字符分割,将E前面存为字符串,E后面存为整型,方便控制小数点的位置 用指针控制E前面的字符串 读取的时候用到了一种格式化字符串%[^...]，这和%s类似，不过会终止于[^]里面的字符，而不是空白字符，利用这个可以简单的读取’E’前后的两个数。 ","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:8","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e#include \u003cstring.h\u003e int main() { int index; char n[10003] = {'\\0'}; scanf(\"%[^E]E%d\", n, \u0026index); if(n[0] == '-') printf(\"-\");/* 负号前面输出-,正号前面不用 */ if(index \u003e= 0){ movepoint(n, index); printf(\"%s\\n\", n+1); } else{/* index \u003c 0时,控制输出格式 「0.」补0,后拼接 */ printf(\"0.\"); for(index++; index; index++){ printf(\"0\"); } printf(\"%c%s\\n\", n[1], n+3); } return 0; } int movepoint(char n[], int index)/* 移动,通过+0并且移动小数点 */ { char *p = n+2; for(; index; index--){ if(*(p+1) != '\\0') *p = *(p+1);/* 小数点后移 */ else *p = '0';/* 补0 */ p++; *p = '.'; } if(*(p+1) == '\\0') *p = '\\0'; return 0; }","date":"2021-01-26","objectID":"/zh-cn/posts/pat-basic-1024/:0:9","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1024","uri":"/zh-cn/posts/pat-basic-1024/"},{"categories":["PAT Basic"],"content":"PAT Basic 1023. 组个最小数（20分） (C语言实现) ","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"题目 给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。 现给定数字，请编写程序输出能够组成的最小的数。 ","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"输入格式 输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。 ","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"输出格式 在一行中输出能够组成的最小的数。 ","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"输入样例 2 2 0 0 0 3 0 0 1 0 ","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"输出样例 10015558 ","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"思路 首位为非零最小值,首位后为0-9从小到大依此输出 故我们仅需讨论零和非零,控制首位输出 ","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int zero, nonzero; scanf(\"%d\", \u0026zero); for(int i = 1; i \u003c 10; i++) { scanf(\"%d\", \u0026nonzero); while(nonzero--) { printf(\"%d\",i); for(; zero; zero--)/* 输出一位不为0,后输出全部0 */ printf(\"0\"); } } return 0; }","date":"2021-01-25","objectID":"/zh-cn/posts/pat-basic-1023/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1023","uri":"/zh-cn/posts/pat-basic-1023/"},{"categories":["PAT Basic"],"content":"PAT Basic 1022. D进制的A+B（20分） (C语言实现) ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"题目 输入两个非负 10 进制整数 A 和 B (≤\\( 2^{30} \\)−1)，输出 A+B 的 D (1\u003cD≤10)进制数。 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"输入格式 输入在一行中依次给出 3 个整数 A、B 和 D。 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"输出格式 输出 A+B 的 D 进制数。 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"输入样例 123 456 8 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"输出样例 1103 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"思路 进制转换,让我们举例看看应该采用什么方式写这题 88（10进制）\\( 8 * 10^1 + 8 * 10^0 \\) 让我们把10进制转8进制看看 88 = \\( 1 * 8^2 + 3 * 8^1 +0 * 8^0 \\) = 130 (8) /八进制范围0-7 你应该现在有点思路了！ ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int A, B, D, Sum; scanf(\"%d %d %d\", \u0026A, \u0026B, \u0026D); Sum = A + B; int power = 1; /* 找到最大的 N * D^n */ while(Sum / D \u003e= power) power *= D; /* 不断修正,求出D进制中的每一位N */ for(; power \u003e 0; Sum %= power, power /= D) printf(\"%d\", Sum / power); return 0; }","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1022/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1022","uri":"/zh-cn/posts/pat-basic-1022/"},{"categories":["PAT Basic"],"content":"PAT Basic 1021. 个位数统计（15分） (C语言实现) ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:0","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"题目 给定一个 k 位整数 N=\\( d_{k-1} 10^{k-1}\\)+⋯+\\( d_{1} 10^{1}\\)+\\( d_0 \\) (0≤ \\( d_i \\) ≤9, i=0,⋯,k−1, \\( d_{k-1} \\)\u003e0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 N=100311，则有 2 个 0，3 个 1，和 1 个 3。 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:1","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"输入格式 每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 NN 。 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:2","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"输出格式 对 NN 中每一种不同的个位数字，以 D:M 的格式在一行中输出该位数字 D 及其在 NN 中出现的次数 M。要求按 D 的升序输出。 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:3","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"输入样例 100311 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:4","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"输出样例 0:2 1:3 3:1 ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:5","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"思路 无,有手就行,你可以的！！！ ","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:6","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { char s; int number[10] = {0};/* 记录0-9出现次数 */ while((s = getchar()) != '\\n') number[s - '0']++; for(int i = 0; i \u003c 10; i++) if(number[i]) printf(\"%d:%d\\n\", i, number[i]); return 0; }","date":"2021-01-23","objectID":"/zh-cn/posts/pat-basic-1021/:0:7","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1021","uri":"/zh-cn/posts/pat-basic-1021/"},{"categories":["PAT Basic"],"content":"PAT Basic 1020. 月饼（25分） (C语言实现) ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:0","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"题目 月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。 注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:1","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"输入格式 每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:2","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"输出格式 对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:3","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"输入样例 3 20 18 15 10 75 72 45 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:4","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"输出样例 94.50 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:5","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"思路 给出一个不超过 1000 的正整数 N 表示月饼的种类数,故用数组记录库存量和对应的售价 让我们想想在知道市场最大销售值后,销售中我们需要做哪些工作 找到各种月饼中利润最大那种,看看他的库存量与最大销售值关系,库存量 \u003e 最大销售值 / 库存量 \u003c 最大销售值 不断的‘减’最大库存,和不断的‘加’利润,并且注意输出格式 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:6","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int N, max; float D, Storage[1000], Total = 0, Price[1000]; /* Total利益,Storage库存量,Price售价 */ scanf(\"%d %f\", \u0026N, \u0026D); for(int i = 0; i \u003c N; i++) scanf(\"%f\", \u0026Storage[i]); for(int i = 0; i \u003c N; i++) scanf(\"%f\", \u0026Price[i]); while(D \u003e 0){ max = 0; for(int i = 0; i \u003c N; i++) if(Price[i] / Storage[i] \u003e Price[max] / Storage[max]) max = i;/* 找到最贵的位置 */ if(Storage[max] \u003c D){/* 还没达到最大需求 */ Total += Price[max]; D -= Storage[max]; Price[max] = 0; }else{ Total += Price[max] * D / Storage[max]; D = 0; } } printf(\"%.2f\", Total); return 0; }","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1020/:0:7","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1020","uri":"/zh-cn/posts/pat-basic-1020/"},{"categories":["PAT Basic"],"content":"PAT Basic 1019. 数字黑洞（20分） (C语言实现) ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"题目 给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。 ​ 例如，我们从6767开始，将得到 7766 - 6677 = 1089 9810 - 0189 = 9621 9621 - 1269 = 8352 8532 - 2358 = 6174 7641 - 1467 = 6174 ... ... 现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"输入格式 输入给出一个 (0,\\( 10^4 \\)) 区间内的正整数 N。 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"输出格式 如果 N 的 4 位数字全相等，则在一行内输出 N - N = 0000；否则将计算的每一步在一行内输出，直到 6174 作为差出现，输出格式见样例。注意每个数字按 4 位数格式输出。 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"输入样例1 6767 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"输出样例1 7766 - 6677 = 1089 9810 - 0189 = 9621 9621 - 1269 = 8352 8532 - 2358 = 6174 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"输入样例2 2222 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"输出样例2 2222 - 2222 = 0000 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"思路 输入值是一个4位数,我们需要先将输入值各位排序,并转置排序后的值 回顾PAT Basic 1015中用到的qsort函数,那边文章中有详细的qsort使用说明 让我们把问题简单化,细分每个关键功能,再进行组装 do-while的用法相对简单,浅显易懂 ","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:8","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e int cmp(const void *a, const void *b){ return *(int*)b - *(int*)a; } int sort(int n){/* 输出排序完后的4位数数值 */ int digits[4] = {n/1000, n%1000/100, n%100/10, n%10};/* 记录每一位 */ qsort(digits, 4, sizeof(int), cmp);/* 排序 */ return digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + digits[3]; } int reverse(int n){/* 4位数的转置,统计各位 */ return n/1000 + n%1000/100 * 10 + n%100/10 * 100 + n%10 * 1000; } int main(){ int N; scanf(\"%d\", \u0026N); do{ N = sort(N); printf(\"%04d - %04d = %04d\\n\", N, reverse(N), N - reverse(N)); /* %04d控制输出位数:1会显示为0001 */ N = N - reverse(N); }while(N != 0 \u0026\u0026 N != 6174) ; return 0; }","date":"2021-01-20","objectID":"/zh-cn/posts/pat-basic-1019/:0:9","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1019","uri":"/zh-cn/posts/pat-basic-1019/"},{"categories":["PAT Basic"],"content":"PAT Basic 1018. 锤子剪刀布（20分） (C语言实现) ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"题目 大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示： 现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"输入格式 输入第 1 行给出正整数 N（≤\\( 10^5 \\)），即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"输出格式 输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"输入样例 10 C J J B C B B B B C C C C B J B B C J J ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"输出样例 5 3 2 2 3 5 B B ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"思路 相对简单,计数问题 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e char max(int B, int C, int J)/* 统计次数,输出赢都最多猜拳情况 */ { if(B \u003e= C \u0026\u0026 B \u003e= J) return 'B'; if(C \u003e= B \u0026\u0026 C \u003e= J) return 'C'; else return 'J'; } int main() { int N; char a, b; int AwinB = 0, AwinC = 0, AwinJ = 0, Awin = 0; int BwinB = 0, BwinC = 0, BwinJ = 0, Bwin = 0; scanf(\"%d\", \u0026N); for(int i = 0; i \u003c N; i++) { scanf(\"%c %c\", \u0026a, \u0026b); if(a == 'B' \u0026\u0026 b == 'C') Awin++; AwinB++; if(a == 'C' \u0026\u0026 b == 'J') Awin++; AwinC++; if(a == 'J' \u0026\u0026 b == 'B') Awin++; AwinJ++; if(a == 'B' \u0026\u0026 b == 'J') Bwin++; BwinJ++; if(a == 'C' \u0026\u0026 b == 'B') Bwin++; BwinB++; if(a == 'J' \u0026\u0026 b == 'C') Bwin++; BwinC++; } printf(\"%d %d %d\\n\", Awin, N - Awin - Bwin, Bwin); printf(\"%d %d %d\\n\", Bwin, N - Awin - Bwin, Awin); printf(\"%c %c\", max(AwinB, AwinC, AwinJ), max(BwinB, BwinC, BwinJ)); return 0; }","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1018/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1018","uri":"/zh-cn/posts/pat-basic-1018/"},{"categories":["PAT Basic"],"content":"PAT Basic 1017. A除以B（20分） (C语言实现) ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"题目 本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"输入格式 输入在一行中依次给出 A 和 B，中间以 1 空格分隔。 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"输出格式 在一行中依次输出 Q 和 R，中间以 1 空格分隔。 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"输入样例 123456789050987654321 7 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"输出样例 17636684150141093474 3 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"思路 不超过1000位！无法用int定义,改用char 模拟手算除法的过程,B是一位的正整数 回归手算过程：例如123/3 我们将1与3比较,1不够除以3,借一位用12除以3,后同理 ","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int B; char A[1001], *p = A; scanf(\"%s %d\", A, \u0026B); int one, two = 0; for(int i = 0; A[i]; i ++) { one = two * 10 + (A[i] - '0');/* 转数字 */ A[i] = one / B + '0';/* 转字符 */ two = one % B;/* 每次除后的余数 */ } B = two; /* print */ if(A[0] == '0' \u0026\u0026 A[1] != '\\0') p++;/* 第一位不够除(为0),后移一位 */ printf(\"%s %d\", p, B); return 0; }","date":"2021-01-19","objectID":"/zh-cn/posts/pat-basic-1017/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1017","uri":"/zh-cn/posts/pat-basic-1017/"},{"categories":["PAT Basic"],"content":"PAT Basic 1016. 部分A+B（15分） (C语言实现) ","date":"2021-01-18","objectID":"/zh-cn/posts/pat-basic-1016/:0:0","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1016","uri":"/zh-cn/posts/pat-basic-1016/"},{"categories":["PAT Basic"],"content":"题目 正整数 A 的“\\( D_A \\)（为 1 位整数）部分”定义为由 A 中所有 \\( D_A \\)组成的新整数 \\( P_A \\)。 例如：给定 A=3862767, \\( D_A \\) = 6, 则 A 的“6 部分” \\( P_A \\) 是66，因为 A 中有 2 个 6。 现给定 A、\\( D_A \\)、B、\\( D_B \\)，请编写程序计算 \\( P_A \\) + \\( P_B \\)。 ","date":"2021-01-18","objectID":"/zh-cn/posts/pat-basic-1016/:0:1","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1016","uri":"/zh-cn/posts/pat-basic-1016/"},{"categories":["PAT Basic"],"content":"输入格式 输入在一行中依次给出 A、\\( D_A \\)、B、\\( D_B \\)，中间以空格分隔，其中 0 \u003c A,B \u003c\\( 10^{10} \\)。 ","date":"2021-01-18","objectID":"/zh-cn/posts/pat-basic-1016/:0:2","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1016","uri":"/zh-cn/posts/pat-basic-1016/"},{"categories":["PAT Basic"],"content":"输出格式 在一行中输出 \\( P_A \\) + \\( P_B \\) 的值。 ","date":"2021-01-18","objectID":"/zh-cn/posts/pat-basic-1016/:0:3","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1016","uri":"/zh-cn/posts/pat-basic-1016/"},{"categories":["PAT Basic"],"content":"测试用例 输入样例1 3862767 6 13530293 3 输出样例1 399 输入样例2 3862767 1 13530293 8 输出样例2 0 ","date":"2021-01-18","objectID":"/zh-cn/posts/pat-basic-1016/:0:4","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1016","uri":"/zh-cn/posts/pat-basic-1016/"},{"categories":["PAT Basic"],"content":"思路 相对简单的一道题,需要注意给定的A,B范围0 \u003c A,B \u003c\\( 10^{10} \\), 故用long int 还记得记录一个数上的每一位的方式吗,不断/10 这里我们是找到D_X在X中的出现次数,并记录 ","date":"2021-01-18","objectID":"/zh-cn/posts/pat-basic-1016/:0:5","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1016","uri":"/zh-cn/posts/pat-basic-1016/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e long D_X(long X, int D_X) { long P_X; for(P_X = 0; X; X /= 10) if(A % 10 == D_X) P_X = P_X * 10 + D_X; /* 记录D_X */ return P_X; } int main() { long A, B; int D_A, D_B; scanf(\"%ld %d %ld %d\", \u0026A, \u0026D_A, \u0026B, \u0026D_B); printf(\"%ld\", D_X(A, D_A) + D_X(B, D_B)); return 0; }","date":"2021-01-18","objectID":"/zh-cn/posts/pat-basic-1016/:0:6","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1016","uri":"/zh-cn/posts/pat-basic-1016/"},{"categories":["PAT Basic"],"content":"PAT Basic 1015. 德才论（25分） (C语言实现) ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:0","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"题目 宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。” 现给出一批考生的德才分数，请根据司马光的理论给出录取排名。 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:1","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"输入格式 输入第一行给出 3 个正整数，分别为：N（≤\\( 10^5 \\)），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（\u003c100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。 随后 N 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:2","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"输出格式 输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:3","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"输入样例 14 60 80 10000001 64 90 10000002 90 60 10000011 85 80 10000003 85 80 10000004 80 85 10000005 82 77 10000006 83 76 10000007 90 78 10000008 75 79 10000009 59 90 10000010 88 45 10000012 80 100 10000013 90 99 10000014 66 60 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:4","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"输出样例 12 10000013 90 99 10000012 80 100 10000003 85 80 10000011 85 80 10000004 80 85 10000007 90 78 10000006 83 76 10000005 82 77 10000002 90 60 10000014 66 60 10000008 75 79 10000001 64 90 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:5","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"思路（借鉴大佬,本题偏难） 审题 第一类【才德全尽：德分/才分均高于H（优先录取线）,总分从高到低排序】 第二类【德胜才：才分不到但德分到线,按总分排序,排在第一类考生之后】 第三类【“才德兼亡”但尚有“德胜才”者：德才分均低于 H，但是德分不低于才分的考生】 第四类【其他达到最低线 L的考生 】 总分相同时,按其德分降序排列;若德分也并列,则按准考证号的升序输出 构思 qsort()函数 void qsort(void *base,size_t nitems,size_t size,int (*compar)) int compar(const void *a, const void *b) base -- 指向要排序的数组的第一个元素的指针。 nitems -- 由 base 指向的数组中元素的个数。 size -- 数组中每个元素的大小，以字节为单位。 compar -- 用来比较两个元素的函数。 compar()函数 ​ compar 参数指向一个比较两个元素的函数.比较函数的原型应该像下面这样.注意两个形参必须是 const void * 型,同时在调用 compar 函数（compar 实质为函数指针,这里称它所指向的函数也为 compar）时,传入的实参也必须转换成const void * 型.在 compar 函数内部会将 const void * 型转换成实际类型,如果 compar 返回值小于 0（\u003c 0）,那么 p1 所指向元素会被排在p2所指向元素的前面如果 compar 返回值等于 0（= 0）,那么 p1 所指向元素与 p2 所指向元素的顺序不确定如果 compar 返回值大于 0（\u003e 0）,那么 p1 所指向元素会被排在 p2 所指向元素的后面。 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:6","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e //里有qsort() typedef struct _Student{ int ID; int D; /** de2 : virtue */ int C; /** cai2: ability */ int rank; int sum; /** sum = D + C */ }sStudent, *Student; /* larger the number, higher the rank */ int rank(Student s, int H, int L) {/* 学生分类 */ if(s-\u003eD \u003c L || s-\u003eC \u003c L) return 0; /* failed */ else if(s-\u003eD \u003e= H \u0026\u0026 s-\u003eC \u003e= H) return 4; /* best */ else if(s-\u003eD \u003e= H) return 3; /* second */ else if(s-\u003eD \u003e= s-\u003eC) return 2; /* third */ else return 1; /* fourth */ } int comp(const void *a, const void *b) {/* 继承学生结构并进行比较,定义排序规则,rank\u003esum\u003eD\u003eID */ Student s1 = *(Student*)a; Student s2 = *(Student*)b; if(s1-\u003erank != s2-\u003erank) return s1-\u003erank - s2-\u003erank; else if(s1-\u003esum != s2-\u003esum) return s1-\u003esum - s2-\u003esum; else if(s1-\u003eD != s2-\u003eD) return s1-\u003eD - s2-\u003eD; else if(s1-\u003eID != s2-\u003eID) return s2-\u003eID - s1-\u003eID; else return 0; } int main() { int N, L, H, M = 0; Student students[100000] = {0}; sStudent buffer[100000];/* 最多10w学生 */ scanf(\"%d %d %d\", \u0026N, \u0026L, \u0026H); for(int i = 0; i \u003c N; i++) { Student s = buffer + i;/* 循环申请,记录学生 */ scanf(\"%d %d %d\", \u0026s-\u003eID, \u0026s-\u003eD, \u0026s-\u003eC); s-\u003esum = s-\u003eD + s-\u003eC; if((s-\u003erank = rank(s, H, L)) != 0) /* 记录过线的全部学生 */ students[M++] = s; } qsort(students, M, sizeof(Student), comp);/* 从小到大排序 */ printf(\"%d\\n\", M); for(int i = M - 1; i \u003e= 0; i--) printf(\"%d %d %d\\n\", students[i]-\u003eID, students[i]-\u003eD, students[i]-\u003eC); return 0; }","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1015/:0:7","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1015","uri":"/zh-cn/posts/pat-basic-1015/"},{"categories":["PAT Basic"],"content":"PAT Basic 1014. 福尔摩斯的约会（20分） (C语言实现) ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"题目 大侦探福尔摩斯接到一张奇怪的字条：我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s\u0026hgsfdk d\u0026Hyscvnm。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间星期四 14:04，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 D，代表星期四；第 2 对相同的字符是 E ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 A 到 N 表示）；后面两字符串第 1 对相同的英文字母 s 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"输入格式 输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"输出格式 在一行中输出约会的时间，格式为 DAY HH:MM，其中 DAY 是某星期的 3 字符缩写，即 MON 表示星期一，TUE 表示星期二，WED 表示星期三，THU 表示星期四，FRI 表示星期五，SAT 表示星期六，SUN 表示星期日。题目输入保证每个测试存在唯一解。 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"输入样例 3485djDkxh4hhGE 2984akDfkkkkggEdsb s\u0026hgsfdk d\u0026Hyscvnm ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"输出样例 THU 14:04 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"思路 让我们来直观点来理解题目 str1[index] = str2[index] 找到 index 的位置 两对字符串 第一对字符串包含两个信息：日期/时间 xx : 00 第二对字符串包含一个信息：时间 00 : xx 都是通过找相同字符的位置,位置对应的解读信息的方式不同 Ascii码的应用,可以百度去查看下对应规则 需要注意一些输出格式 ","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e#include \u003cctype.h\u003e int main() { char str1[61], str2[61], str3[61], str4[61]; scanf(\"%s %s %s %s\", str1, str2, str3, str4); /* Find day */ int DAY; char *weekdays[] = {\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"}; for(DAY = 0; str1[DAY] \u0026\u0026 str2[DAY]; DAY++) if(str1[DAY] == str2[DAY] \u0026\u0026 str1[DAY] \u003e= 'A' \u0026\u0026 str1[DAY] \u003c= 'G') { printf(\"%s\", weekdays[str1[DAY] - 'A']);/* 利用Ascii码 */ break; } /* Find hour [A-N|0-9] */ int HH; for(HH = DAY + 1; str1[HH] \u0026\u0026 str2[HH]; HH++) if(str1[HH] == str2[HH]) { if(str1[HH] \u003e= 'A' \u0026\u0026 str1[HH] \u003c= 'N') { printf(\"%02d\", str1[HH] - 'A' + 10); break; } if(isdigit(str1[HH])) { printf(\"%02d\", str1[HH] - '0'); break; } } /* Find minute */ int MM; for(MM = 0; str3[MM] \u0026\u0026 str4[MM]; MM++) if(str3[MM] == str4[MM] \u0026\u0026 isalpha(str3[MM])) { printf(\":%02d\", MM); break; } return 0; }","date":"2021-01-17","objectID":"/zh-cn/posts/pat-basic-1014/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1014","uri":"/zh-cn/posts/pat-basic-1014/"},{"categories":["PAT Basic"],"content":"PAT Basic 1013. 数素数（20分） (C语言实现) ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"题目 令 \\( P_i \\)表示第 i 个素数。现任给两个正整数 M ≤ N ≤\\( 10^4 \\),请输出\\( P_M \\)到 \\( P_N \\) 的所有素数。 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"输入格式 输入在一行中给出 M 和 N,其间以空格分隔。 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"输出格式 输出从\\( P_M \\)到 \\( P_N \\) 的所有素数,每 10 个数字占 1 行,其间以空格分隔,但行末不得有多余空格。 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"输入样例 5 27 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"输出样例 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"思路 还记得1007的素数判断条件吗？素数的性质！1,2,3,5,7,11,13... 用建立素数表的方法,同时能把被取余的那个数更改为素数表中的素数,以简便算法 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int M, N; scanf(\"%d %d\", \u0026M, \u0026N); int primes[10000]; for(int n = 2, count = 0; count \u003c N; n++) { /* iprime标准变量：1素数/0非素数 */ int iprime = 1; for(int j = 0; count \u003e 0 \u0026\u0026 primes[j] * primes[j] \u003c= n; j++) if(n % primes[j] == 0) iprime = 0; /* 找到素数,并记录 */ if(iprime) primes[count++] = n; } /* 输出,注意输出格式 */ for(int i = M; i \u003c N; i++) { printf(\"%d\", primes[i - 1]); printf((i - M + 1) % 10 ? \"\" : \"\\n\"); } printf(\"%d\", primes[N - 1]); return 0; }","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1013/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1013","uri":"/zh-cn/posts/pat-basic-1013/"},{"categories":["PAT Basic"],"content":"PAT Basic 1012. 数字分类（20分） (C语言实现) ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1012/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1012","uri":"/zh-cn/posts/pat-basic-1012/"},{"categories":["PAT Basic"],"content":"题目 给定一系列正整数,请按要求对数字进行分类,并输出以下 5 个数字： \\( A_1 \\) = 能被 5 整除的数字中所有偶数的和； \\( A_2 \\) = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 \\( n_1 - n_2 + n_3 - n_4... \\)； \\( A_3 \\) = 被 5 除后余 2 的数字的个数； \\( A_4 \\) = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位； \\( A_5 \\) = 被 5 除后余 4 的数字中最大数字。 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1012/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1012","uri":"/zh-cn/posts/pat-basic-1012/"},{"categories":["PAT Basic"],"content":"输入格式 每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1012/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1012","uri":"/zh-cn/posts/pat-basic-1012/"},{"categories":["PAT Basic"],"content":"输出格式 对给定的 N 个正整数，按题目要求计算 \\( A_1 ～ A_5 \\) 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。 若其中某一类数字不存在，则在相应位置输出 N。 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1012/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1012","uri":"/zh-cn/posts/pat-basic-1012/"},{"categories":["PAT Basic"],"content":"测试用例 输入样例1 13 1 2 3 4 5 6 7 8 9 10 20 16 18 输出样例1 30 11 2 9.7 9 输入样例2 8 1 2 4 5 6 7 9 16 输出样例2 N 11 2 N 9 ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1012/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1012","uri":"/zh-cn/posts/pat-basic-1012/"},{"categories":["PAT Basic"],"content":"思路 相对简单的一道题,需要注意一些输出格式：float型控制小数点格式 switch的用法需要注意,case后的常量通常指的是常量表达式,它必须是整数类型.在一个特定的 switch 语句中，每个 case 常量都必须具有独一无二的值,不可以重复.但是 switch 语句可以包含多个 case 标签 14/15行的判断语句需要注意理清其中逻辑关系 举例： case 1: A2index = **A2index == 1 ?** -1 : 1;即为判断A2index == 1 ? 后再赋值A2index ","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1012/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1012","uri":"/zh-cn/posts/pat-basic-1012/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int N; int A2index=0,A4count=0; int A1=0,A2=0,A3=0,A4=0,A5=0; scanf(\"%d\",\u0026N); for(int i = 0, n; i \u003c N; i++) { scanf(\"%d\", \u0026n); switch(n % 5) { case 0: A1 += n % 2 ? 0 : n; break; case 1: A2index = A2index == 1 ? -1 : 1; A2 += A2index * n; break; case 2: A3 ++; break; case 3: A4 += n; A4count ++; break; case 4: A5 = n \u003e A5? n : A5; break; } } if(A1 == 0) printf(\"N \"); else printf(\"%d \", A1); if(A2index == 0) printf(\"N \"); else printf(\"%d \", A2); if(A3 == 0) printf(\"N \"); else printf(\"%d \", A3); if(A4 == 0) printf(\"N \"); else printf(\"%.1f \", A4 * 1.0 / A4count); /* 保留小数点格式注意 */ if(A5 == 0) printf(\"N\"); else printf(\"%d\", A5); return 0; }","date":"2021-01-16","objectID":"/zh-cn/posts/pat-basic-1012/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1012","uri":"/zh-cn/posts/pat-basic-1012/"},{"categories":["PAT Basic"],"content":"PAT Basic 1011. A+B和C（15分） (C语言实现) ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:0","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"题目 给定区间 [\\( -2^{31} \\),\\( 2^{31} \\)] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:1","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"输入格式 输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:2","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"输出格式 对每组测试用例，在一行中输出 Case #X: true 如果 A+B\u003eC，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:3","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"输入样例 4 1 2 3 2 3 4 2147483647 0 2147483646 0 -2147483648 -2147483647 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:4","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"输出样例 Case #1: false Case #2: true Case #3: true Case #4: false ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:5","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"思路 一道相对简单的题,需要注意的是数值范围,所以我们定义ABC用的是long int int可表达范围：-2147483648～2147483647 long int可表达范围：-9223372036854775808～9223372036854775807 #include \u003cstdio.h\u003e#include\u003climits.h\u003e int main(void) { printf(\"%lld\",LLONG_MAX);/* 可输出对应环境long int最大值 */ return 0; } ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:6","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int N; long int A, B, C; scanf(\"%d\", \u0026N); for(int i = 1; i \u003c= N; i++) { scanf(\"%ld %ld %ld\", \u0026A, \u0026B, \u0026C); printf(\"Case #%d: %s\\n\", i, A + B \u003e C ? \"true\" : \"false\"); } return 0; }","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1011/:0:7","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1011","uri":"/zh-cn/posts/pat-basic-1011/"},{"categories":["PAT Basic"],"content":"PAT Basic 1010. 一元多项式求导（25分） (C语言实现) ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:0","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"题目 设计函数求一元多项式的导数。（注：\\( x^n \\)（n为整数）的一阶导数为 \\( nx^{n-1} \\)。） ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:1","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"输入格式 以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:2","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"输出格式 以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:3","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"输入样例 3 4 -5 2 6 1 -2 0 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:4","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"输出样例 12 3 -10 1 6 0 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:5","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"思路 样例：\\( 3x^4 -5x^2 + 6x -2 \\) 求导后 \\( 12x^4 - 10x + 6 \\) 注意常数求导,以及控制输出格式 ","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:6","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"实现代码 #include\u003cstdio.h\u003eint main() { int A,index; scanf(\"%d %d\",\u0026A,\u0026index); if(index == 0) printf(\"%d %d\",0,0); /* n==0 说明是常数,不需要求导 */ else printf(\"%d %d\",A * index,index - 1); while(scanf(\"%d %d\",\u0026A,\u0026index)!=EOF) { /* EOF是行末的意思,意思就是这一行还有东西就继续 */ if(index != 0) printf(\"%d %d\",A * index,index - 1); } return 0; }","date":"2021-01-15","objectID":"/zh-cn/posts/pat-basic-1010/:0:7","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1010","uri":"/zh-cn/posts/pat-basic-1010/"},{"categories":["PAT Basic"],"content":"PAT Basic 1009. 说反话（20分） (C语言实现) ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"题目 给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"输入格式 测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"输出格式 每个测试用例的输出占一行，输出倒序后的句子。 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"输入样例 Hello World Here I Come ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"输出样例 Come I Here World Hello ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"思路 相对简单的一道题,还是类似转置输出数据 字符串数组格式！ ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"实现代码 #include\u003cstdio.h\u003e int main() { int i=0; char word[80][81]; /* 字符串数组：一个单词为一个数组元素 */ while(scanf(\"%s\",word[i++]) \u0026\u0026 (getchar()!='\\n')); while(--i) printf(\"%s \",word[i]); /* 控制输出格式 */ printf(\"%s\",word[0]); return 0; }","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1009/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1009","uri":"/zh-cn/posts/pat-basic-1009/"},{"categories":["PAT Basic"],"content":"PAT Basic 1008. 数组元素循环右移问题（20分） (C语言实现) ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"题目 一个数组A中存有N（\u003e0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由（\\( A_0 A_1 ... A_{N-1} \\)）变换为（\\( A_{N-M}... A_{N-1} A_0 A_1 ... A_{N-M-1} \\))（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？ ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"输入格式 每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"输出格式 在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"输入样例 6 2 1 2 3 4 5 6 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"输出样例 5 6 1 2 3 4 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"思路 相对简单的一道题,还记得顺序表时间复杂度o(1)的转置吗？ 本题要求在不允许使用另外数组的前提下。 一个需注意的点为M可能大于等于N，需要对N取余再进行接下来的操作。 ","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int N, M, numbers[100]; scanf(\"%d %d\", \u0026N, \u0026M); M %= N; /* M可能会大于N,取余后就行接下来的操作 */ /* 省略会挂两个测试点 */ for(int i = 0; i \u003c N; i++) scanf(\"%d\", \u0026numbers[i]); for(int i = N - M; i \u003c N; i++) /* Print N - M to N - 1 */ printf(\"%d \", numbers[i]); for(int i = 0; i \u003c N - M - 1; i++) /* Print 0 to N - M - 2 */ printf(\"%d \", numbers[i]); printf(\"%d\", numbers[N - M - 1]); /* 控制最后一个数字不带空格 */ return 0; }","date":"2021-01-14","objectID":"/zh-cn/posts/pat-basic-1008/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1008","uri":"/zh-cn/posts/pat-basic-1008/"},{"categories":["PAT Basic"],"content":"PAT Basic 1007. 素数对猜想（20分） (C语言实现) ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"题目 让我们定义\\( d_n \\)为 ：\\( d_n = P_{n+1} - P_n \\)，其中\\( P_i \\)是第i个素数。显然有\\( d_1 = 1 \\)，且对于n\u003e1有\\( d_n \\)是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。 现给定任意正整数N(\u003c\\( 10^5 \\))，请计算不超过N的满足猜想的素数对的个数。 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"输入格式 输入在一行给出正整数N。 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"输出格式 在一行中输出不超过N的满足猜想的素数对的个数。 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"输入样例 20 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"输出样例 4 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"思路 分析题目 素数！只能被自身和一整除 且对于n\u003e1有\\( d_n \\)是偶数！素数只可能是奇数 输入的是不超过N的猜想,不是N的猜想！ 1-20 试着写出所有素数 （1,2,3,5,7,11,13,17,19) 实现思路 初始化：100个素数里初始化便写入第1个位置,标记为a[1]=1,从2开始验证，这样不影响边界情况（N=5之前没有孪生素数），避免了2这样没有更小的素数可供验证的情况，并且进入循环即可开始验证孪生素数 结果参考 N 孪生素数对数 1-4 0 20 4 100 8 1000 35 10000 205 100000 1224 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"实现代码 #include\u003cstdio.h\u003e int main() { int a[100000] = {0}; int n, t = 1, c = 0; scanf(\"%d\",\u0026n); a[1] = 1; for(int i = 2;i \u003c= n; i++) { if(!a[i])//a[i] = 0执行 { if(i - t == 2) c++;//判断是否满足素数对 t = i;//交换 for(int j = 2;j * i \u003c= n; j++) a[i * j]=1; //当前相邻不满足素数对,将所有非素数位置标价 } } printf(\"%d\",c); return 0; }","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1007/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1007","uri":"/zh-cn/posts/pat-basic-1007/"},{"categories":["PAT Basic"],"content":"PAT Basic 1006. 换个格式输出整数（15分） (C语言实现) ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1006/:0:0","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1006","uri":"/zh-cn/posts/pat-basic-1006/"},{"categories":["PAT Basic"],"content":"题目 让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12...n 来表示不为零的个位数字 n（\u003c10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1006/:0:1","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1006","uri":"/zh-cn/posts/pat-basic-1006/"},{"categories":["PAT Basic"],"content":"输入格式 每个测试输入包含 1 个测试用例，给出正整数 n（\u003c1000）。 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1006/:0:2","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1006","uri":"/zh-cn/posts/pat-basic-1006/"},{"categories":["PAT Basic"],"content":"输出格式 每个测试用例的输出占一行，用规定的格式输出 n。 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1006/:0:3","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1006","uri":"/zh-cn/posts/pat-basic-1006/"},{"categories":["PAT Basic"],"content":"输出样例 输入样例1 234 输出样例1 BBSSS1234 输入样例2 23 输出样例2 SS123 ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1006/:0:4","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1006","uri":"/zh-cn/posts/pat-basic-1006/"},{"categories":["PAT Basic"],"content":"思路 是一道不用思路的简单题hhh,有手就行,你可以的！ ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1006/:0:5","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1006","uri":"/zh-cn/posts/pat-basic-1006/"},{"categories":["PAT Basic"],"content":"实现代码 #include\u003cstdio.h\u003e int main(){ int K,A,B,C; scanf(\"%d\",\u0026K); A = K % 10;//个位 B = (K / 10) % 10;//十位 C = (K / 100) % 10;//百位 //printf(\"%d %d %d\\n\",A,B,C); for(int i = 0; i \u003c C; i++) printf(\"B\"); for(int i = 0; i \u003c B; i++) printf(\"S\"); for(int i = 1; i \u003c= A; i++) printf(\"%d\",i); return 0; } ","date":"2021-01-12","objectID":"/zh-cn/posts/pat-basic-1006/:0:6","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1006","uri":"/zh-cn/posts/pat-basic-1006/"},{"categories":["PAT Basic"],"content":"PAT Basic 1005. 继续(3n+1)猜想（25分） (C语言实现) ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:0","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"题目 卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。 当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。 现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。 ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:1","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"输入格式 每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (\u003c100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1\u003cn≤100)的值，数字间用空格隔开。 ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:2","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"输出格式 每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。 ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:3","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"输入样例 6 3 5 6 7 8 11 ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:4","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"输出样例 7 6 ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:5","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"思路 分析题目 回看Basic 1001,3n+1猜想！https://onepl3.github.io/posts/pat-basic-1001/ 题目类似字符串模式匹配,比如在字符A的后半段是一个完整的字符B(字符B的全部),如果对这题一开始没有思绪,建议打印数值A每次卡拉兹(Callatz)猜想后的数值变化 实现思路 记录初始给出的关键字,对每个数字进行验证计算,每当遇到初始给的数字时,对其进行标记 一般进行从小到大的遍历,验证一个较大数字时,某一步计算得到一个较小数字(属于初始数字中),则无需继续验证,因为接下来是重复操作 注意数字范围是1-100,建议定义数组size为101,初始给出的数字给标记为1,其他为0 ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:6","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int K, n, table[101] = {0}; scanf(\"%d\", \u0026K); for(int i = 0; i \u003c K; i++) { scanf(\"%d\", \u0026n); table[n] = 1; } /* 找到测试所需数字 */ for(int i = 1; i \u003c= 100; i++) if(table[i]) for(int j = i; j \u003e 1; ) { /* 执行每次卡拉兹(Callatz)猜想 */ if(j % 2) j = (3 * j + 1) / 2; else j /= 2; /* 寻找新一轮的猜想数字是否是初始值 */ if(j \u003c= 100 \u0026\u0026 table[j]) { table[j] = 0; /* 'covered' this number */ K--; /* one less number not 'covered' */ if(j \u003c i) break; /* did this before, no need going on */ } } for(int i = 100; i \u003e= 1; i--)/* 从大到小!*/ if(table[i] == 1) printf(\"%d%c\", i, --K ? '' : '\\0'); /* --K ? ' ' : '\\0' 判断语句,控制输出格式*/ return 0; } ","date":"2021-01-11","objectID":"/zh-cn/posts/pat-basic-1005/:0:7","tags":["PAT Basic","C","score 25"],"title":"PAT Basic 1005","uri":"/zh-cn/posts/pat-basic-1005/"},{"categories":["PAT Basic"],"content":"PAT Basic 1004. 成绩排名（20分） (C语言实现) ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:0","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"题目 读入 n（\u003e0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:1","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"输入格式 第 1 行：正整数 n 第 2 行：第 1 个学生的姓名 学号 成绩 第 3 行：第 2 个学生的姓名 学号 成绩 … … … 第 n+1 行：第 n 个学生的姓名 学号 成绩 其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:2","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"输出格式 对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:3","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"输入样例 3 Joe Math990112 89 Mike CS991301 100 Mary EE990830 95 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:4","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"输出样例 Mike CS991301 Joe Math990112 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:5","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"思路 相比于1003,1004是一道相对简单的题 我们可以使用数据结构中找Max or Min的思想,如果满足条件,不断交换至找到最值 注意题目所给三种数据的范围 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:6","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"实现代码 #include\u003cstdio.h\u003e#include\u003cstring.h\u003e int main(){ int N; scanf(\"%d\",\u0026N); //Max—最大值的各种数据项 //Min-最小值的各种数据项 //cur-当前值的各种数据项 char maxname[11],minname[11],curname[11], maxid[11],minid[11],curid[11]; int max = -1, min = 101, cur; for(int i = 0;i \u003c N; i++){ scanf(\"%s %s %d\",curname,curid,\u0026cur); //cur-字符串不给赋值符号\u0026 if(cur \u003e max){ strcpy(maxname,curname); strcpy(maxid,curid); max=cur; } if(cur \u003c min){ strcpy(minname,curname); strcpy(minid,curid); min=cur; } } printf(\"%s %s\\n\",maxname,maxid); printf(\"%s %s\",minname,minid); return 0; } ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1004/:0:7","tags":["PAT Basic","C"],"title":"PAT Basic 1004","uri":"/zh-cn/posts/pat-basic-1004/"},{"categories":["PAT Basic"],"content":"PAT Basic 1003. 我要通过（20分） (C语言实现) ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"题目 “答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。 得到“答案正确”的条件是： 字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符； 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串； 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。 现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"输入格式 每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 n (\u003c10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"输出格式 每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出 YES，否则输出 NO。。 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"输入样例 8 PAT PAAT AAPATAA AAPAATAAAA xPATx PT Whatever APAAATAA ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"输出样例 YES YES YES YES NO NO NO NO ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"思路 审题 字符串只能包含‘P’ ‘A ’ ‘T’三种字符,如果存在其他字符则判错 xPATx格式是正确的,这个条件需要正确理解,两个x是指代相同的字符串!!! aPbTc正确,aPbATca也正确.本题的重点! P和T中间每增加一个A,就需要将P之前的内容复制到字符串尾部. 总结 注意看这八个测试样例 只存在‘P’ ‘ T’ ‘A’ 这三个字符 ‘P’ 与 ‘T’ 的先后关系 ‘P’ 与 ‘T’ 之间不能没有 ‘A’ ‘T’ 之后 ‘A’ 的数量 = ‘P’ 之前 ‘A’ 的数量 \\( * \\) ‘P\u0026T’ 中间 ‘A’ 的数量 代码思路 用三个数分别记录三个位置的‘A’个数（用数组count 使用类似标记变量pos,检查‘P’,‘T’的出现及次序 (count[pos]) 其值在出现P之前为0（使用count[0]记录P之前的A） 只有在出现P且其值为0时，将值变为1（使用count[1]记录P\u0026T之间的A） 只有在出现T且其值为1时，将其变为2（使用count[2]记录T之后的A） ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { char c; int num; scanf(\"%d\", \u0026num); while(getchar() != '\\n'); /* 确保从读取每行时,从开头读取：‘\\n’分割 */ for(int i = 0; i \u003c num; i++) { int pos = 0, count[3] = {0, 0, 0}; while((c = getchar()) != '\\n') { if(c == 'A') count[pos]++; /* count 'A's */ else if(c == 'P' \u0026\u0026 pos == 0) pos = 1; /* one P before T */ else if(c == 'T' \u0026\u0026 pos == 1) pos = 2; /* one T after P */ else break; /* 'wrong' string */ } if(c == '\\n' \u0026\u0026 pos == 2 \u0026\u0026 count[1] \u0026\u0026 count[2] == count[1] * count[0]) //见思路 puts(\"YES\"); else puts(\"NO\"); /* read the rest of the line */ if(c != '\\n') while(getchar() != '\\n'); } return 0; }","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1003/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1003","uri":"/zh-cn/posts/pat-basic-1003/"},{"categories":["PAT Basic"],"content":"PAT Basic 1002. 写出这个数（20分） (C语言实现) ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:0","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"题目 读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:1","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"输入格式 每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 \\( {10}^{100} \\) ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:2","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"输出格式 在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:3","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"输入样例 1234567890987654321123456789 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:4","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"输出样例 yi san wu ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:5","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"思路 读取每一位上的数值,本是相对比较简单的操作(见注释) 但我们发现输入样例过长时,继续将输入值用int做,将无法通过测试. 故我们将输入值转换为字符串进行操作 ","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:6","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e/* while(num){ i=num%10; s+=i; num/=10; printf(\"%d %d\\n\",i,num); } */ int main() { int sum = 0; char c, *number[] = {\"ling\", \"yi\", \"er\", \"san\", \"si\", \"wu\", \"liu\", \"qi\", \"ba\", \"jiu\"}; //提前存入数字对应对拼音 while((c = getchar()) != '\\n') sum += c - '0'; //遍历字符串每一个字符,并且利用ascii码将字符转为数字后累加至sum if(sum / 100) /* hundreds */ printf(\"%s \", number[sum / 100]); if(sum / 10) /* tens */ printf(\"%s \", number[sum / 10 % 10]); printf(\"%s\", number[sum % 10]); /* units */ return 0; }","date":"2021-01-10","objectID":"/zh-cn/posts/pat-basic-1002/:0:7","tags":["PAT Basic","C","score 20"],"title":"PAT Basic 1002","uri":"/zh-cn/posts/pat-basic-1002/"},{"categories":["PAT Basic"],"content":"PAT Basic 1001. 害死人不偿命的(3n+1)猜想 (15) (C语言实现) ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:0","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":["PAT Basic"],"content":"题目 卡拉兹(Callatz)猜想： 对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展…… 我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？ ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:1","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":["PAT Basic"],"content":"输入格式 每个测试输入包含 1 个测试用例，即给出正整数 n 的值。 ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:2","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":["PAT Basic"],"content":"输出格式 输出从 n 计算到 1 需要的步数。 ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:3","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":["PAT Basic"],"content":"输入样例 3 ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:4","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":["PAT Basic"],"content":"输出样例 5 ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:5","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":["PAT Basic"],"content":"思路 较为简单的一道题,按照规则读取输入数值后,对其循环处理直至number=1. ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:6","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":["PAT Basic"],"content":"实现代码 #include \u003cstdio.h\u003e int main() { int number, steps; scanf(\"%d\", \u0026number); for(steps = 0; number != 1; steps++) if(number % 2 == 0) number /= 2; else number = (3 * number + 1) / 2; printf(\"%d\", steps); return 0; } ","date":"2021-01-09","objectID":"/zh-cn/posts/pat-basic-1001/:0:7","tags":["PAT Basic","C","score 15"],"title":"PAT Basic 1001","uri":"/zh-cn/posts/pat-basic-1001/"},{"categories":null,"content":"Hello Hugo! ","date":"2021-01-07","objectID":"/zh-cn/posts/first/:0:0","tags":null,"title":"First","uri":"/zh-cn/posts/first/"},{"categories":null,"content":"  LoveIt 是一个由 Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveItHugo 主题 LoveIt \" Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/zh-cn/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/zh-cn/about/"},{"categories":null,"content":"特性 性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 外观和布局 / 响应式布局 / 浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 64 种社交链接  支持多达 28 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 Utterances 评论系统 扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightgallery.js 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $ \\KaTeX $ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 Smooth Scroll 的滚动动画  支持基于 cookieconsent 的 Cookie 许可横幅 … ","date":"2019-08-02","objectID":"/zh-cn/about/:0:1","tags":null,"title":"关于 LoveIt","uri":"/zh-cn/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css Smooth Scroll autocomplete.js Lunr.js algoliasearch lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/zh-cn/about/:0:2","tags":null,"title":"关于 LoveIt","uri":"/zh-cn/about/"}]